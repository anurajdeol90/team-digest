#!/usr/bin/env bash
set -euo pipefail

# Read refs from stdin (lines like "<local_ref> <local_sha> <remote_ref> <remote_sha>")
INPUT="$(cat)"

# Only guard pushes to main
if ! grep -qE 'refs/heads/main$' <<<"$INPUT"; then
  exit 0
fi

# Find a Python interpreter
if command -v python3 >/dev/null 2>&1; then PY=python3
elif command -v python >/dev/null 2>&1; then PY=python
elif command -v py >/dev/null 2>&1; then PY="py -3"
else
  echo "[pre-push] Python not found on PATH. Skipping guard." >&2
  exit 0
fi

# Run the PyPI version guard in an inline Python snippet
$PY - "$INPUT" <<'PY'
import json, pathlib, re, sys, urllib.request

stdin = sys.argv[1].splitlines() if len(sys.argv) > 1 else []
if not any(line.endswith(" refs/heads/main") for line in stdin):
    sys.exit(0)

pp = pathlib.Path("src/team_digest/__init__.py")
m = re.search(r'__version__\s*=\s*[\'"]([^\'"]+)[\'"]', pp.read_text(encoding="utf-8"))
ver = m.group(1) if m else None
if not ver:
    print("[pre-push] Could not read __version__", file=sys.stderr)
    sys.exit(1)

try:
    with urllib.request.urlopen("https://pypi.org/pypi/team-digest/json", timeout=10) as r:
        data = json.load(r)
    if ver in (data.get("releases") or {}):
        print(f"[pre-push] Version {ver} already on PyPI. Bump version before pushing.", file=sys.stderr)
        sys.exit(1)
except Exception as e:
    print(f"[pre-push] Warning: PyPI check failed ({e}). Allowing push.", file=sys.stderr)

sys.exit(0)
PY