name: Release

on:
  push:
    branches: [ "main" ]
    paths:
      - "pyproject.toml"
      - "src/**"
      - "README.md"
      - "USAGE.md"
      - "MANIFEST.in"
  tags:
    - "v*"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Build sdist + wheel
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tooling
        run: |
          python -m pip install -U pip
          pip install build twine

      - name: Build dist (sdist + wheel)
        run: python -m build

      - name: Twine check
        run: python -m twine check dist/*

      - name: Sanity: examples packaged in wheel
        run: |
          python -c "import glob,zipfile; wh=sorted(glob.glob('dist/*.whl'))[0]; print('Inspecting', wh); z=zipfile.ZipFile(wh); files=[n for n in z.namelist() if n.startswith('team_digest/examples/')]; print('\n'.join(files) or 'NO_EXAMPLES_FOUND'); assert files, 'ERROR: examples/ missing from wheel'"



      - name: Extract package version
        id: ver
        run: >
          python - <<'PY'
          from pathlib import Path
          import re
          m = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']',
                        Path("src/team_digest/__init__.py").read_text(encoding="utf-8"))
          print(f"version={m.group(1) if m else '0+unknown'}")
          PY
        shell: bash

      - name: Save version to outputs
        id: version_out
        run: echo "${{ steps.ver.outputs.version }}" # (keeps step; not strictly required)

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish_testpypi:
    name: Publish to TestPyPI (on push to main)
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/heads/')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/team-digest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download built dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Publish to TestPyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish_pypi:
    name: Publish to PyPI (on tag v*)
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/team-digest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check version matches tag
        run: >
          python - <<'PY'
          import os, re
          from pathlib import Path
          tag = os.environ['GITHUB_REF'].split('/')[-1].lstrip('v')
          txt = Path('src/team_digest/__init__.py').read_text(encoding='utf-8')
          m = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']', txt)
          pkg = m.group(1) if m else ''
          print('Tag:', tag, '/ Package:', pkg)
          assert pkg, 'No __version__ found'
          assert pkg == tag, f'Version mismatch (tag {tag} vs package {pkg})'
          PY
        shell: bash

      - name: Download built dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
