name: Release

on:
  # 1) Automatic pre-release to TestPyPI on pushes to main
  push:
    branches: [ "main" ]
    paths:
      - "pyproject.toml"
      - "src/**"
      - "README.md"
      - "USAGE.md"
      - "MANIFEST.in"

  # 2) Official release to PyPI on version tags
  tags:
    - "v*"

  # 3) Manual trigger if needed
  workflow_dispatch:

permissions:
  contents: read
  id-token: write   # required for Trusted Publishing (no API token needed)

jobs:
  build:
    name: Build sdist + wheel
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tooling
        run: |
          python -m pip install -U pip
          pip install build twine

      - name: Build dist (sdist + wheel)
        run: python -m build

      - name: Twine check
        run: python -m twine check dist/*

      - name: Sanity: examples packaged in wheel
        shell: bash
        run: |
          set -euo pipefail
          wh=$(ls -1 dist/*.whl | head -n1)
          echo "Inspecting $wh"
          unzip -l "$wh" | grep -q "team_digest/examples/" || (echo "ERROR: examples/ missing from wheel" >&2; exit 2)
          unzip -l "$wh" | grep "team_digest/examples/" || true

      - name: Extract package version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          PYVER=$(python - <<'PY'
from pathlib import Path
import re
p = Path("src/team_digest/__init__.py").read_text(encoding="utf-8")
m = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']', p)
print(m.group(1) if m else "0+unknown")
PY
)
          echo "version=$PYVER" >> "$GITHUB_OUTPUT"
          echo "Built version: $PYVER"

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  # Pre-release: publish to TestPyPI on branch pushes to main
  publish_testpypi:
    name: Publish to TestPyPI (push to main)
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/heads/')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/team-digest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download built dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to TestPyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true  # avoid failures if the same version already exists

  # Official release: publish to PyPI when a tag v* is pushed
  publish_pypi:
    name: Publish to PyPI (tag v*)
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/team-digest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Check version matches tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF#refs/tags/}"
          TAG="${TAG#v}"  # strip leading v
          PKG_VER=$(python - <<'PY'
from pathlib import Path, re
m = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']', Path("src/team_digest/__init__.py").read_text(encoding="utf-8"))
print(m.group(1) if m else "")
PY
)
          echo "Tag: $TAG / Package: $PKG_VER"
          [ -n "$PKG_VER" ] || { echo "No __version__ found"; exit 1; }
          [ "$TAG" = "$PKG_VER" ] || { echo "Version mismatch (tag $TAG vs package $PKG_VER)"; exit 1; }

      - name: Download built dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
