name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write   # needed for creating tags/releases
      id-token: write   # required for trusted publishing

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed if we create a tag

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build package (sdist + wheel)
        run: python -m build

      - name: Sanity check wheel contents
        run: python scripts/check_examples.py

      - name: Determine local version
        id: read_version
        run: |
          python - <<'PY'
          import re, pathlib, os
          txt = pathlib.Path("src/team_digest/__init__.py").read_text(encoding="utf-8")
          m = re.search(r'__version__\s*=\s*[\'"]([^\'"]+)[\'"]', txt)
          ver = m.group(1) if m else ""
          print("version:", ver)
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
              f.write(f"version={ver}\n")
          PY

      - name: Check if this version already exists on PyPI
        id: check_pypi
        run: |
          python - <<'PY'
          import os, json, urllib.request
          exists = False
          ver = os.environ.get("VER")
          try:
              with urllib.request.urlopen("https://pypi.org/pypi/team-digest/json", timeout=10) as r:
                  data = json.load(r)
              exists = ver in (data.get("releases") or {})
          except Exception as e:
              print("NOTE: PyPI lookup failed (will attempt publish):", e)
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
              f.write(f"exists={str(exists).lower()}\n")
          PY
        env:
          VER: ${{ steps.read_version.outputs.version }}

      - name: Skip notice (version already on PyPI)
        if: steps.check_pypi.outputs.exists == 'true'
        run: echo "Version ${{ steps.read_version.outputs.version }} already on PyPI; skipping publish."

      - name: Publish to PyPI
        if: steps.check_pypi.outputs.exists != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Create tag if missing
        if: steps.check_pypi.outputs.exists != 'true'
        run: |
          TAG="v${{ steps.read_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release (generated notes)
        if: steps.check_pypi.outputs.exists != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.read_version.outputs.version }}
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz
