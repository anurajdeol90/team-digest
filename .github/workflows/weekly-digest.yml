name: Weekly Digest

on:
  schedule:
    - cron: "0 8 * * 1"  # Mondays at 08:00 (uses TZ below)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string
      week_scope:
        description: "Week to summarize: last (default) or this"
        required: false
        default: "last"
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"

          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"
          fi

          echo "INPUT_DIR=$INPUT_DIR" | tee -a "$GITHUB_ENV"

      - name: Compute week window (Mon..Sun)
        shell: bash
        env:
          WEEK_SCOPE: ${{ github.event.inputs.week_scope || 'last' }}
        run: |
          set -euo pipefail
          python - <<'PY' >> "$GITHUB_ENV"
import os, datetime as dt
scope = (os.environ.get("WEEK_SCOPE") or "last").strip().lower()
today = dt.date.today()
mon = today - dt.timedelta(days=today.weekday())  # Monday of THIS week
if scope.startswith("last"):
    mon = mon - dt.timedelta(days=7)
sun = mon + dt.timedelta(days=6)
print(f"FROM={mon}")
print(f"TO={sun}")
print(f"WEEK_SCOPE={scope}")
PY
          echo "Window: $FROM .. $TO"

      - name: Normalize / retime logs (safe edits)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in "$INPUT_DIR"/notes-????-??-??.*; do
            base="$(basename "$f")"
            datepart="${base#notes-}"; datepart="${datepart%%.*}"
            # stamp mtime to noon UTC to avoid DST edges
            touch -m -d "${datepart} 12:00:00" "$f" || true
            # normalize Windows newlines, bullets, stray escapes, and smart dashes
            sed -i \
              -e 's/\r$//' \
              -e 's/•\t/- /g' \
              -e 's/• /- /g' \
              -e 's/\\#/#/g' \
              -e 's/\\\[/[/' \
              -e 's/\\-/-/g' \
              -e 's/–/-/g' \
              -e 's/—/-/g' \
              "$f" || true
          done

      - name: Diagnostics — list and match by filename date
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=$INPUT_DIR"
          echo "All files in $INPUT_DIR:"; ls -la "$INPUT_DIR" || true
          echo
          echo "Matching notes-YYYY-MM-DD.* within $FROM..$TO (by filename date):"
          python - <<'PY'
import os, re, glob, datetime as dt
root = os.environ["INPUT_DIR"].rstrip("/")
frm  = dt.date.fromisoformat(os.environ["FROM"])
to   = dt.date.fromisoformat(os.environ["TO"])
pat  = re.compile(r'^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$', re.I)
names = [os.path.basename(p) for p in glob.glob(root + "/notes-*")]
hits = []
for n in sorted(names):
    m = pat.match(n)
    if not m: 
        continue
    d = dt.date.fromisoformat(m.group(1))
    if frm <= d <= to:
        hits.append(n)
print("MATCHES:", ", ".join(hits) if hits else "(none)")
PY

      - name: Generate weekly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/weekly.md
          echo '---- Preview (first 40 lines) ----'
          head -n 40 outputs/weekly.md || true

      - name: Sort “Actions” by priority (high → medium → low → untagged)
        shell: bash
        continue-on-error: true
        run: |
          python - <<'PY'
import re, io, sys
p = "outputs/weekly.md"
try:
  t = io.open(p, "r", encoding="utf-8").read()
except FileNotFoundError:
  sys.exit(0)

# Find Actions block
sec_re = re.compile(r'^##\s+Actions\s*$', re.M)
next_sec = re.compile(r'^##\s+\w+', re.M)

m = sec_re.search(t)
if not m:
  sys.exit(0)

start = m.end()
m2 = next_sec.search(t, start)
end = m2.start() if m2 else len(t)
block = t[start:end]

# Extract bullets only within the block
lines = block.splitlines()
bullets = [ln for ln in lines if re.match(r'^\s*[-*]\s+', ln)]
others  = [ln for ln in lines if ln not in bullets]

def prio_key(ln: str) -> int:
  s = ln.lower()
  if "[high]" in s: return 0
  if "[medium]" in s: return 1
  if "[low]" in s: return 2
  return 3

ordered = sorted(bullets, key=prio_key)
new_block = "\n".join(ordered + ([""] if ordered and (others and others[0].strip()) else []) + others)

new_text = t[:start] + "\n" + new_block.strip("\n") + "\n" + t[end:]
io.open(p, "w", encoding="utf-8").write(new_text)
PY

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/weekly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: outputs/**
