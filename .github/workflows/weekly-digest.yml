name: Weekly Digest

on:
  schedule:
    - cron: "0 8 * * 1"  # Mondays at 08:00 in your configured TZ (see job env)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string
      week_scope:
        description: "Week to summarize: last (default) or this"
        required: false
        default: "last"
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}
      DIGEST_INPUT_DIR: ${{ vars.DIGEST_INPUT_DIR || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "${CANDIDATE:-}" ] && [ -n "${DIGEST_INPUT_DIR:-}" ]; then
            CANDIDATE="${DIGEST_INPUT_DIR}"
          fi
          [ -z "${CANDIDATE:-}" ] && CANDIDATE="logs"
          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"
          fi
          echo "INPUT_DIR=$INPUT_DIR" | tee -a "$GITHUB_ENV"

      - name: Compute week window (Mon..Sun) in Bash
        shell: bash
        env:
          WEEK_SCOPE_IN: ${{ github.event.inputs.week_scope }}
        run: |
          set -euo pipefail
          scope="${WEEK_SCOPE_IN:-last}"
          scope="${scope,,}"
          if [[ "$scope" == this* ]]; then
            MON=$(date +%F -d "monday this week")
          else
            MON=$(date +%F -d "monday last week")
          fi
          SUN=$(date +%F -d "$MON +6 days")
          echo "FROM=$MON" | tee -a "$GITHUB_ENV"
          echo "TO=$SUN"   | tee -a "$GITHUB_ENV"
          echo "Window: $MON .. $SUN"

      - name: Normalize / retime logs (safe edits)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in "$INPUT_DIR"/notes-????-??-??.*; do
            base="$(basename "$f")"
            datepart="${base#notes-}"; datepart="${datepart%%.*}"
            touch -m -d "${datepart} 12:00:00" "$f" || true
            sed -i \
              -e 's/\r$//' \
              -e 's/•\t/- /g' \
              -e 's/• /- /g' \
              -e 's/\\#/#/g' \
              -e 's/\\\[/[/' \
              -e 's/\\-/-/g' \
              -e 's/–/-/g' \
              -e 's/—/-/g' \
              "$f" || true
          done

      - name: Diagnostics — list and match by filename date
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=$INPUT_DIR"
          echo "All files in $INPUT_DIR:"; ls -la "$INPUT_DIR" || true
          echo
          echo "Matching notes-YYYY-MM-DD.* within $FROM..$TO (by filename date):"
          root="${INPUT_DIR%/}"
          found=()
          shopt -s nullglob
          for path in "$root"/notes-*; do
            name="$(basename "$path")"
            if [[ "$name" =~ ^notes-([0-9]{4}-[0-9]{2}-[0-9]{2})\.(md|markdown|txt)$ ]]; then
              d="${BASH_REMATCH[1]}"
              if [[ "$d" >="$FROM" && "$d" <="$TO" ]]; then
                found+=("$name")
              fi
            fi
          done
          if ((${#found[@]})); then
            IFS=$'\n' sorted=($(printf '%s\n' "${found[@]}" | sort)); unset IFS
            echo "MATCHES: ${sorted[*]}"
          else
            echo "MATCHES: (none)"
          fi

      - name: Generate weekly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/weekly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/weekly.md || true

      # Sort "Actions" by priority [high] → [medium] → [low] → (untagged), shell-only, no Python heredocs
      - name: Sort “Actions” by priority (high→medium→low→rest)
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          f="outputs/weekly.md"
          [ -s "$f" ] || exit 0

          # Split into pre / actions section / post using csplit (coreutils)
          # x00 = pre (before Actions heading)
          # x01 = from "## Actions" to EOF
          if ! csplit -s -f x "$f" '/^##[[:space:]]\+Actions[[:space:]]*$/'; then
            # No Actions heading → nothing to reorder
            exit 0
          fi

          # Now split x01 at the NEXT section header to isolate only the Actions block
          # y00 = "## Actions" + its block
          # y01 = remainder (post)
          csplit -s -f y x01 '/^##[[:space:]]\+[^ ]/1' || true

          # If y01 wasn't created, then Actions was the last section; create empty post
          [ -f y01 ] || : > y01

          # Extract the body (drop the first line = the "## Actions" heading)
          tail -n +2 y00 > actions.raw || : > actions.raw

          # Pull bullets out by priority (case-insensitive), others (non-bullets) kept after bullets
          : > high.tmp; : > med.tmp; : > low.tmp; : > rest.tmp; : > other.tmp

          # Separate bullets vs other lines in Actions block
          while IFS= read -r line; do
            if [[ "$line" =~ ^[[:space:]]*[-*][[:space:]]+ ]]; then
              lcl="${line,,}"
              if [[ "$lcl" == *"[high]"* ]];   then echo "$line" >> high.tmp
              elif [[ "$lcl" == *"[medium]"* ]]; then echo "$line" >> med.tmp
              elif [[ "$lcl" == *"[low]"* ]];    then echo "$line" >> low.tmp
              else echo "$line" >> rest.tmp
              fi
            else
              echo "$line" >> other.tmp
            fi
          done < actions.raw

          # Rebuild the Actions section: heading + sorted bullets + blank line (if needed) + other lines
          {
            echo "## Actions"
            cat high.tmp med.tmp low.tmp rest.tmp
            # Add a single blank line if there are bullets and the next "other" line is not already blank
            if [ -s high.tmp ] || [ -s med.tmp ] || [ -s low.tmp ] || [ -s rest.tmp ]; then
              if [ -s other.tmp ]; then
                first_nonblank=$(grep -n -m1 -v '^[[:space:]]*$' other.tmp | cut -d: -f1 || true)
                if [ -n "$first_nonblank" ] && [ "$first_nonblank" -eq 1 ]; then
                  echo
                fi
              fi
            fi
            cat other.tmp
          } > actions.sorted

          # Stitch pre + new Actions + post back together
          cat x00 actions.sorted y01 > "$f"

          # Cleanup temp files
          rm -f x00 x01 y00 y01 actions.raw high.tmp med.tmp low.tmp rest.tmp other.tmp actions.sorted

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/weekly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: outputs/**
