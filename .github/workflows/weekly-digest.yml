name: Weekly Digest

on:
  schedule:
    - cron: "0 8 * * 1"   # Mondays 08:00 (uses TZ below)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string
      week_scope:
        description: "Which week to summarize"
        required: false
        default: "this"
        type: choice
        options: [this, last-full]

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}            # your preferred timezone
      WEEK_SCOPE: ${{ github.event.inputs.week_scope || 'this' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"
          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"
          fi
          echo "INPUT_DIR=$INPUT_DIR" | tee -a "$GITHUB_ENV"

      - name: Compute week window (Mon..Sun) in Python
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os, datetime as dt
scope = (os.environ.get("WEEK_SCOPE") or "this").lower()
today = dt.date.today()
monday_this = today - dt.timedelta(days=today.weekday())   # 0 = Monday
sunday_this = monday_this + dt.timedelta(days=6)
if scope == "last-full":
    monday = monday_this - dt.timedelta(days=7)
    sunday = monday + dt.timedelta(days=6)
else:
    monday = monday_this
    sunday = sunday_this
print(f"FROM={monday}  TO={sunday}")
print(f"Window (Mon..Sun): {monday} .. {sunday}")
with open(os.environ["GITHUB_ENV"], "a") as fh:
    fh.write(f"FROM={monday}\n")
    fh.write(f"TO={sunday}\n")
PY

      - name: Normalize & retime logs (mtime ← filename date)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os, re, io, datetime as dt, pathlib as p
root = p.Path(os.environ["INPUT_DIR"])
if not root.exists():
    print(f"INPUT_DIR missing: {root}")
    raise SystemExit(0)
pat = re.compile(r"^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$", re.I)
# simple Markdown cleanup -> keep bullets/headings sane
def fix_text(t:str)->str:
    t = t.replace("\r\n","\n").replace("•\t","- ").replace("• ","- ")
    t = re.sub(r"\\#","#",t)
    t = re.sub(r"\\\[","[",t)
    # ensure bare section words are headings
    sect = {"summary","decisions","actions","risks","dependencies","notes"}
    out=[]
    for line in t.splitlines():
        s=line.strip().lower()
        if s in sect and not line.lstrip().startswith("#"):
            out.append("## "+line.strip())
        else:
            out.append(line)
    return "\n".join(out).strip() + "\n"
for f in root.rglob("*"):
    if not f.is_file(): continue
    m = pat.match(f.name)
    try:
        t = f.read_text(encoding="utf-8", errors="replace")
    except Exception:
        t = io.open(f, "r", encoding="utf-8", errors="replace").read()
    new = fix_text(t)
    if new != t:
        f.write_text(new, encoding="utf-8")
    # Set mtime from filename date so --from/--to matches correctly
    if m:
        day = dt.date.fromisoformat(m.group(1))
        noon = dt.datetime.combine(day, dt.time(12,0))
        ts = noon.timestamp()
        os.utime(f, (ts, ts))
print("Retiming complete.")
PY

      - name: Rock-solid diagnostics (list files & matches)
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=$INPUT_DIR"
          echo "All files in $INPUT_DIR:"
          ls -la "$INPUT_DIR" || true
          echo
          echo "Matching notes-YYYY-MM-DD.* within $FROM..$TO (by filename date):"
          python - <<'PY'
import os, re, datetime as dt, pathlib as p
root = p.Path(os.environ["INPUT_DIR"])
frm  = dt.date.fromisoformat(os.environ["FROM"])
to   = dt.date.fromisoformat(os.environ["TO"])
pat  = re.compile(r"^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$", re.I)
matches = []
if root.is_dir():
    for f in sorted(root.iterdir()):
        m = pat.match(f.name)
        if not m: continue
        d = dt.date.fromisoformat(m.group(1))
        if frm <= d <= to:
            matches.append(f.name)
print("MATCHES:", ", ".join(matches) if matches else "(none)")
PY

      - name: Generate weekly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/weekly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/weekly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/weekly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: outputs/**
