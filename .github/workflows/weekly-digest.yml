name: Weekly Digest (last full week)

on:
  schedule:
    - cron: "0 8 * * 1"  # Mondays at 08:00 in your configured TZ
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"
          if [ -d "$CANDIDATE" ]; then INPUT_DIR="$CANDIDATE";
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE";
          else INPUT_DIR="$CANDIDATE"; fi
          echo "Resolved INPUT_DIR=$INPUT_DIR"
          echo "INPUT_DIR=$INPUT_DIR" >> "$GITHUB_ENV"

      - name: Normalize & retime logs
        shell: bash
        run: |
          set -euo pipefail
          python -c "import os,re,io,datetime as dt,time,pathlib as p; \
            root=p.Path(os.environ['INPUT_DIR']); \
            pat=re.compile(r'^notes-(\\d{4}-\\d{2}-\\d{2})\\.(md|markdown|txt)$', re.I); \
            sect={'summary','decisions','actions','risks','dependencies','notes'}; \
            def fix(t): \
              t=t.replace('\\r\\n','\\n').replace('•\\t','- ').replace('• ','- '); \
              t=re.sub(r'\\\\#','#',t); t=re.sub(r'\\\\\\[','[',t); \
              lines=[]; \
              for line in t.splitlines(): \
                s=line.strip().lower(); \
                if s in sect and not line.lstrip().startswith('#'): lines.append('## '+line.strip()); \
                else: lines.append(line); \
              return '\\n'.join(lines).strip()+'\\n'; \
            if root.exists(): \
              for f in root.rglob('*'): \
                if not f.is_file(): continue; \
                m=pat.match(f.name); \
                try: t=f.read_text(encoding='utf-8',errors='replace'); \
                except Exception: t=io.open(f,'r',encoding='utf-8',errors='replace').read(); \
                new=fix(t); \
                if new!=t: f.write_text(new,encoding='utf-8'); \
                if m: \
                  day=dt.date.fromisoformat(m.group(1)); noon=dt.datetime.combine(day,dt.time(12,0)); ts=noon.timestamp(); \
                  os.utime(f,(ts,ts))"

      - name: Compute last full calendar week (Mon..Sun)
        shell: bash
        run: |
          set -euo pipefail
          python -c "from datetime import date,timedelta; \
            today=date.today(); \
            # Monday of this week, then step back 7 days to get the previous week
            this_mon = today - timedelta(days=today.weekday()); \
            last_mon = this_mon - timedelta(days=7); \
            last_sun = last_mon + timedelta(days=6); \
            print('FROM='+last_mon.isoformat()); print('TO='+last_sun.isoformat())" >> "$GITHUB_ENV"
          echo "Range: $FROM → $TO"

      - name: List candidate files (diagnostics)
        shell: bash
        run: |
          set -euo pipefail
          echo "All files in $INPUT_DIR:"; ls -la "$INPUT_DIR" || true
          echo
          echo "Files matching notes-YYYY-MM-DD.* within $FROM..$TO:"
          python -c "import os,re,datetime as dt,pathlib as p; \
            d=p.Path(os.environ['INPUT_DIR']); frm=dt.date.fromisoformat(os.environ['FROM']); to=dt.date.fromisoformat(os.environ['TO']); \
            pat=re.compile(r'^notes-(\\d{4}-\\d{2}-\\d{2})\\.(md|markdown|txt)$',re.I); ms=[]; \
            (d.exists() and d.is_dir()) and [ms.append(f.name) for f in sorted(d.iterdir()) \
              if pat.match(f.name) and frm<=dt.date.fromisoformat(pat.match(f.name).group(1))<=to]; \
            print('MATCHES:', ', '.join(ms) if ms else '(none)')"

      - name: Generate weekly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/weekly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/weekly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/weekly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: outputs/**
