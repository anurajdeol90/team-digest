name: Weekly Digest

on:
  schedule:
    - cron: "0 8 * * 1"   # Mondays at 08:00 (uses TZ below)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string
      week_scope:
        description: "this (current Mon..Sun) or last (previous Mon..Sun)"
        required: false
        default: "this"
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"
          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"
          fi
          echo "INPUT_DIR=$INPUT_DIR" | tee -a "$GITHUB_ENV"

      - name: Compute week window (Mon..Sun) safely
        shell: bash
        run: |
          set -euo pipefail
          scope="${GITHUB_INPUT_WEEK_SCOPE:-this}"   # provided by workflow_dispatch
          # Pass SCOPE to Python without embedding ${{ }} inside the Python string
          SCOPE="$scope" python - <<'PY'
import os, datetime as dt
today = dt.date.today()
# Monday of the current week
mon = today - dt.timedelta(days=today.weekday())
sun = mon + dt.timedelta(days=6)
scope = os.environ.get('SCOPE','this').lower()
if scope.startswith('last'):
    mon = mon - dt.timedelta(days=7)
    sun = mon + dt.timedelta(days=6)
print(f"FROM={mon}")
print(f"TO={sun}")
PY
          # Append to GITHUB_ENV
          FROM=$(grep '^FROM=' <<< "$(tail -n 2 $GITHUB_STEP_SUMMARY 2>/dev/null || true)" | sed 's/.*FROM=//') || true
          TO=$(grep   '^TO='   <<< "$(tail -n 2 $GITHUB_STEP_SUMMARY 2>/dev/null || true)" | sed 's/.*TO=//') || true
          # Fallback if step summary not used by runner (ensure FROM/TO written)
          if [ -z "${FROM:-}" ] || [ -z "${TO:-}" ]; then
            # Re-run Python and capture stdout directly
            eval "$(
              SCOPE="$scope" python - <<'PY'
import os, datetime as dt
today = dt.date.today()
mon = today - dt.timedelta(days=today.weekday())
sun = mon + dt.timedelta(days=6)
scope = os.environ.get('SCOPE','this').lower()
if scope.startswith('last'):
    mon = mon - dt.timedelta(days=7)
    sun = mon + dt.timedelta(days=6)
print(f"FROM={mon}")
print(f"TO={sun}")
PY
            )"
          fi
          echo "FROM=$FROM" | tee -a "$GITHUB_ENV"
          echo "TO=$TO"     | tee -a "$GITHUB_ENV"
          echo "Window: $FROM .. $TO"

      - name: Retime logs mtime from filename date (notes-YYYY-MM-DD.*)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in "$INPUT_DIR"/notes-????-??-??.*; do
            base="$(basename "$f")"
            datepart="${base#notes-}"; datepart="${datepart%%.*}"
            touch -m -d "${datepart} 12:00:00" "$f" || true
            # Normalize a few common characters/escapes
            sed -i -e 's/\r$//' -e 's/•\t/- /g' -e 's/• /- /g' -e 's/\\#/#/g' -e 's/\\\[/[/' "$f" || true
          done

      - name: Diagnostics — list and match by filename date
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=$INPUT_DIR"
          echo "All files in $INPUT_DIR:"; ls -la "$INPUT_DIR" || true
          echo
          echo "Matching notes-YYYY-MM-DD.* within $FROM..$TO (by filename date):"
          python - <<'PY'
import os, re, glob, datetime as dt
frm = dt.date.fromisoformat(os.environ['FROM'])
to  = dt.date.fromisoformat(os.environ['TO'])
pat = re.compile(r'^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$', re.I)
root = os.environ['INPUT_DIR'].rstrip('/')
names = [os.path.basename(p) for p in glob.glob(root + '/notes-*')]
hits = []
for n in sorted(names):
    m = pat.match(n)
    if not m: 
        continue
    day = dt.date.fromisoformat(m.group(1))
    if frm <= day <= to:
        hits.append(n)
print("MATCHES:", ", ".join(hits) if hits else "(none)")
PY

      - name: Generate weekly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/weekly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/weekly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/weekly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: outputs/**
