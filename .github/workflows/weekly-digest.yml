name: Weekly Digest

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "Start date (YYYY-MM-DD), optional"
        required: false
        type: string
      end_date:
        description: "End date inclusive (YYYY-MM-DD), optional"
        required: false
        type: string
  schedule:
    - cron: "5 0 * * 1"  # Mondays 00:05 UTC

jobs:
  weekly:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      id-token: write
    env:
      LOGS_DIR: logs
      OUTFILE: outputs/weekly.md
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: python -m pip install --upgrade pip

      - name: Resolve date range (use inputs or last Sunday window)
        id: daterange
        shell: bash
        run: |
          # If inputs are provided, honor them.
          IN_START="${{ inputs.start_date }}"
          IN_END="${{ inputs.end_date }}"
          if [ -n "$IN_START" ] && [ -n "$IN_END" ]; then
            START="$IN_START"
            END="$IN_END"
          else
            # Compute last Sunday (UTC) as END, then START=END-6 days.
            LAST_SUN=$(date -u -d "last sunday" +%Y-%m-%d)
            # If today is Sunday, "last sunday" is today; use the previous Sunday instead.
            DOW=$(date -u +%u)  # 1=Mon..7=Sun
            if [ "$DOW" = "7" ]; then
              LAST_SUN=$(date -u -d "$LAST_SUN -7 days" +%Y-%m-%d)
            fi
            END="$LAST_SUN"
            START=$(date -u -d "$END -6 days" +%Y-%m-%d)
          fi
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=$END"     >> $GITHUB_OUTPUT
          echo "Resolved weekly window (UTC): $START .. $END"

      - name: Diagnostics — repo & logs presence
        shell: bash
        run: |
          echo "Tracked under logs/:"
          git ls-files "logs/*" || true
          echo
          echo "Directory listing of $LOGS_DIR:"
          ls -la "$LOGS_DIR" || true

      - name: Diagnostics — match notes by filename date (robust)
        env:
          START: ${{ steps.daterange.outputs.start }}
          END:   ${{ steps.daterange.outputs.end }}
        run: python scripts/diagnose_weekly.py

      - name: Aggregate logs → weekly.md (group Actions)
        shell: bash
        run: |
          mkdir -p outputs
          python scripts/digest_aggregate.py \
            --logs-dir "$LOGS_DIR" \
            --start "${{ steps.daterange.outputs.start }}" \
            --end   "${{ steps.daterange.outputs.end }}" \
            --output "$OUTFILE" \
            --title  "Team Digest (${{ steps.daterange.outputs.start }} - ${{ steps.daterange.outputs.end }})" \
            --group-actions \
            --expect-missing
          echo "---- Counts line ----"
          grep -m1 "^_Range:" "$OUTFILE" || true
          echo "---- Preview (first 60 lines) ----"
          head -n 60 "$OUTFILE" || true

      - name: Sanity check (warn if fully empty)
        shell: bash
        run: |
          if grep -q "_No summary._" "$OUTFILE" && \
             grep -q "_No decisions._" "$OUTFILE" && \
             grep -q "_No actions._" "$OUTFILE" && \
             grep -q "_No risks._" "$OUTFILE" && \
             grep -q "_No dependencies._" "$OUTFILE" && \
             grep -q "_No notes._" "$OUTFILE"; then
            echo "::warning::Digest contains no content; likely date/window mismatch or headings not recognized."
            echo "Top of digest:"
            head -n 30 "$OUTFILE" || true
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: ${{ env.OUTFILE }}

      - name: Post to Slack (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        run: python scripts/post_to_slack.py "$OUTFILE"
