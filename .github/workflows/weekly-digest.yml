name: Weekly Digest

on:
  schedule:
    - cron: "0 8 * * 1"   # Mondays at 08:00 (uses TZ below)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string
      week_scope:
        description: "Which week: this (Mon..Sun) or last (Mon..Sun)"
        required: false
        default: "this"
        type: choice
        options: [this, last]

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "${CANDIDATE}" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "${CANDIDATE}" ] && CANDIDATE="logs"

          if [ -d "${CANDIDATE}" ]; then
            INPUT_DIR="${CANDIDATE}"
          elif [ -d "${GITHUB_WORKSPACE}/${CANDIDATE}" ]; then
            INPUT_DIR="${GITHUB_WORKSPACE}/${CANDIDATE}"
          else
            INPUT_DIR="${CANDIDATE}"
          fi
          echo "INPUT_DIR=${INPUT_DIR}" | tee -a "${GITHUB_ENV}"

      - name: Compute week window (Mon..Sun) — robust
        id: window
        shell: bash
        run: |
          set -euo pipefail
          scope="${{ github.event.inputs.week_scope }}"
          [ -z "${scope}" ] && scope="this"

          # ISO weekday: 1=Mon .. 7=Sun
          w=$(date +%u)

          # Offsets to get Monday/Sunday of *this* week
          from_off=$(( w - 1 ))     # days ago to Monday
          to_off=$(( 7 - w ))       # days forward to Sunday

          FROM=$(date +%F -d "${from_off} days ago")
          TO=$(date +%F -d "${to_off} days")

          if [ "${scope}" = "last" ]; then
            FROM=$(date +%F -d "${FROM} -7 days")
            TO=$(date +%F -d "${TO} -7 days")
          fi

          echo "FROM=${FROM}" | tee -a "${GITHUB_ENV}"
          echo "TO=${TO}"     | tee -a "${GITHUB_ENV}"
          echo "Window: ${FROM} .. ${TO}"

      - name: Diagnostics — list and match notes by filename date
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=${INPUT_DIR}"
          echo "All files in ${INPUT_DIR}:"
          ls -la "${INPUT_DIR}" || true
          echo

          echo "Matching notes-YYYY-MM-DD.* within ${FROM}..${TO} (by filename date):"
          shopt -s nullglob
          hits=()
          for f in "${INPUT_DIR}"/notes-????-??-??.*; do
            base="$(basename "$f")"
            day="${base#notes-}"; day="${day%%.*}"
            if [[ ( "${day}" > "${FROM}" || "${day}" == "${FROM}" ) && ( "${day}" < "${TO}" || "${day}" == "${TO}" ) ]]; then
              hits+=("${base}")
            fi
          done
          if [ "${#hits[@]}" -gt 0 ]; then
            printf 'MATCHES: %s\n' "$(IFS=', '; echo "${hits[*]}")"
          else
            echo "MATCHES: (none)"
          fi

      - name: Generate weekly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "${INPUT_DIR}" --from "${FROM}" --to "${TO}" --format md -o outputs/weekly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/weekly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "${GITHUB_ENV}"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "${GITHUB_ENV}"
          else
            echo "SLACK_WEBHOOK=" >> "${GITHUB_ENV}"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD="$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/weekly.md)"
          curl -fsSL -H 'Content-Type: application/json' --data-raw "${PAYLOAD}" "${SLACK_WEBHOOK}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly-digest
          path: outputs/**
