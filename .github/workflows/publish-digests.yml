name: Publish Digests to GitHub Pages

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "outputs/*.md"
      - "site/**"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build site (copy site + md; build manifest, viewer, index)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p public

          # Copy static site (optional)
          if [ -d site ]; then
            cp -r site/* public/ 2>/dev/null || true
          fi

          # Copy raw digests if any
          if [ -d outputs ]; then
            cp -r outputs/* public/ || true
          fi

          # Manifest of digests
          echo "[" > public/digests.json
          if ls outputs/*.md >/dev/null 2>&1; then
            first=1
            for f in $(ls -1 outputs/*.md | xargs -n1 basename | sort -r); do
              if [ $first -eq 0 ]; then echo "," >> public/digests.json; fi
              first=0
              printf '{"file":"%s"}' "$f" >> public/digests.json
            done
          fi
          echo "]" >> public/digests.json

          # Minimal viewer.html (client-side Markdown rendering with marked.js)
          cat > public/viewer.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>Digest Viewer</title>
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
          <main id="app">Loading…</main>
          <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
          <script>
          const q = new URLSearchParams(location.search);
          const file = q.get('file');
          const app = document.getElementById('app');
          if (!file) { app.textContent = 'No file specified (?file=...)'; }
          else {
            fetch(file).then(r => r.text()).then(md => {
              document.title = file + ' — Team Digest';
              app.innerHTML = marked.parse(md);
            }).catch(e => app.textContent = String(e));
          }
          </script>
          HTML

          # Minimal index.html that lists digests from manifest
          cat > public/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>Team Digests</title>
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
          <h1>Team Digests</h1>
          <p>Search or filter by cadence. Click a result to view the rendered digest. “raw” opens the original Markdown.</p>
          <input id="q" placeholder="Search filename (e.g., weekly_2025-10-06)" style="width:100%;max-width:600px">
          <ul id="list"></ul>
          <script>
          const q = document.getElementById('q');
          const list = document.getElementById('list');
          let items = [];
          fetch('digests.json').then(r=>r.json()).then(data => { items = data; render(); });
          q.addEventListener('input', render);
          function render(){
            const needle = q.value.toLowerCase();
            list.innerHTML = '';
            items
              .filter(x => !needle || x.file.toLowerCase().includes(needle))
              .forEach(x => {
                const li = document.createElement('li');
                li.innerHTML =
                  '<a href="viewer.html?file=' + encodeURIComponent(x.file) + '">' + x.file +
                  '</a> &nbsp; <small>(<a href="' + x.file + '">raw</a>)</small>';
                list.appendChild(li);
              });
          }
          </script>
          HTML

          # Serve files as-is (bypass Jekyll) and print listing for debugging
          touch public/.nojekyll
          echo "=== public listing ==="
          ls -la public

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
