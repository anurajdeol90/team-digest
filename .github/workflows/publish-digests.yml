name: Publish Digests to GitHub Pages

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "outputs/*.md"
      - "site/**"
      - ".github/workflows/publish-digests.yml"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-publish
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build site (copy site, safe-copy md, generate digests.js + feeds)
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x

          mkdir -p public

          # 1) Copy static site (if present)
          if [ -d site ]; then
            cp -r site/* public/ 2>/dev/null || true
          fi

          # 2) Safe-copy digests (only if *.md exists)
          shopt -s nullglob
          md_files=(outputs/*.md)
          if (( ${#md_files[@]} > 0 )); then
            cp "${md_files[@]}" public/
          fi

          # 3) Build digests.js (cadence/date/owners)
          : > public/digests.js
          echo "window.digests = [" >> public/digests.js

          json_array() {
            if [ $# -eq 0 ]; then echo "[]"; return; fi
            local out="["
            local first=1
            for x in "$@"; do
              if [ $first -eq 0 ]; then out+=", "; fi
              first=0
              out+="\"$x\""
            done
            out+="]"
            echo "$out"
          }

          sorted=()
          if (( ${#md_files[@]} > 0 )); then
            # newest-first by filename
            mapfile -t sorted < <(printf '%s\n' "${md_files[@]##*/}" | sort -r)
            first=1
            for f in "${sorted[@]}"; do
              # cadence by filename prefix
              cadence="unknown"
              case "$f" in
                daily_*.md) cadence="daily" ;;
                weekly_*.md) cadence="weekly" ;;
                monthly_*.md) cadence="monthly" ;;
              esac

              # date = suffix after first underscore (minus .md)
              base="${f%.md}"
              date="${base#*_}"

              # owners: match '(owner: XX)' or '(owner: AD)' (case-insensitive)
              owners=()
              if [ -f "outputs/$f" ]; then
                while IFS= read -r line; do
                  owners+=( "$line" )
                done < <(grep -oiE '\(owner: *[A-Za-z0-9_-]+\)' "outputs/$f" \
                         | sed -E 's/^\(owner: *//; s/\)$//; s/ +//g' \
                         | sort -u)
              fi

              owners_json="$(json_array "${owners[@]}")"

              if [ $first -eq 0 ]; then
                echo "," >> public/digests.js
              fi
              first=0

              printf '  {"file":"%s","cadence":"%s","date":"%s","owners":%s}' \
                "$f" "$cadence" "$date" "$owners_json" >> public/digests.js
            done
            echo "" >> public/digests.js
          fi

          echo "];" >> public/digests.js

          # 3b) Publish feeds (JSON + RSS). If no files, publish empty feeds.
          site_url="https://$GITHUB_REPOSITORY_OWNER.github.io/${GITHUB_REPOSITORY#*/}"

          # JSON Feed (https://jsonfeed.org/version/1.1)
          {
            echo '{ "version":"https://jsonfeed.org/version/1.1",'
            echo '  "title":"Team Digests",'
            echo "  \"home_page_url\":\"$site_url/\","
            echo "  \"feed_url\":\"$site_url/feed.json\","
            echo '  "items": ['
            if (( ${#sorted[@]} > 0 )); then
              first=1
              for f in "${sorted[@]}"; do
                [ $first -eq 1 ] && first=0 || echo ','
                base="${f%.md}"
                date="${base#*_}"
                url="$site_url/viewer.html?file=$(python3 - <<PY
import urllib.parse; print(urllib.parse.quote("$(printf %s "$f")"))
PY
)"
                echo "    {\"id\":\"$f\",\"url\":\"$url\",\"title\":\"$f\",\"content_text\":\"$f\",\"date_published\":\"$date\"}"
              done
            fi
            echo '  ]'
            echo '}'
          } > public/feed.json

          # RSS 2.0
          {
            echo '<?xml version="1.0" encoding="UTF-8"?>'
            echo '<rss version="2.0"><channel>'
            echo '  <title>Team Digests</title>'
            echo "  <link>$site_url/</link>"
            echo '  <description>Latest team digests</description>'
            if (( ${#sorted[@]} > 0 )); then
              for f in "${sorted[@]}"; do
                base="${f%.md}"; date="${base#*_}"
                url="$site_url/viewer.html?file=$(python3 - <<PY
import urllib.parse; print(urllib.parse.quote("$(printf %s "$f")"))
PY
)"
                echo '  <item>'
                echo "    <title>$f</title>"
                echo "    <link>$url</link>"
                echo "    <guid isPermaLink=\"false\">$f</guid>"
                echo "    <pubDate>$date</pubDate>"
                echo '  </item>'
              done
            fi
            echo '</channel></rss>'
          } > public/feed.xml

          # 4) Finalize + listing
          touch public/.nojekyll
          echo "=== public listing ==="
          ls -la public

          shopt -u nullglob
          set +x

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

    deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      # url: ${{ steps.deployment.outputs.page_url }}   # ‚Üê remove this line
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

