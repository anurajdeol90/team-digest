name: Daily Digest

on:
  schedule:
    - cron: "0 8 * * 1-5"   # Weekdays at 08:00 in your TZ (see DIGEST_TZ)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install tool
      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      # Resolve INPUT_DIR
      - name: Resolve INPUT_DIR (override → repo var → logs/)
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"

          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"   # allow absolute or mounted paths
          fi

          echo "Resolved INPUT_DIR=$INPUT_DIR"
          echo "INPUT_DIR=$INPUT_DIR" >> "$GITHUB_ENV"

      # Normalize logs + retime from filename
      - name: Normalize & retime logs (markdown + mtime from filename)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import os, re, io, datetime as dt, pathlib as p

root = p.Path(os.environ["INPUT_DIR"])
pat = re.compile(r"^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$", re.I)
sect = {"summary","decisions","actions","risks","dependencies","notes"}

def normalize(txt: str) -> str:
    txt = txt.replace("\r\n", "\n").replace("•\t", "- ").replace("• ", "- ")
    txt = re.sub(r"\\#", "#", txt)
    txt = re.sub(r"\\\[(?=[^\]]+\])", "[", txt)
    out = []
    for line in txt.splitlines():
        s = line.strip().lower()
        if s in sect and not line.lstrip().startswith("#"):
            out.append("## " + line.strip())
        else:
            out.append(line)
    return "\n".join(out).strip() + "\n"

if root.exists():
    for f in root.rglob("*"):
        if not f.is_file():
            continue
        m = pat.match(f.name)
        try:
            t = f.read_text(encoding="utf-8", errors="replace")
        except Exception:
            t = io.open(f, "r", encoding="utf-8", errors="replace").read()
        new = normalize(t)
        if new != t:
            f.write_text(new, encoding="utf-8")
        if m:
            day = dt.date.fromisoformat(m.group(1))
            noon = dt.datetime.combine(day, dt.time(12, 0))
            ts = noon.timestamp()
            os.utime(f, (ts, ts))
print("Normalization complete.")
PY

      # Compute today's range in TZ
      - name: Compute today range (TZ-aware)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY' > _range.env
import os, datetime as dt
try:
    from zoneinfo import ZoneInfo
    z = ZoneInfo(os.environ.get("TZ","UTC"))
except Exception:
    z = None
now = dt.datetime.now(tz=z).date() if z else dt.datetime.utcnow().date()
print(f"FROM={now}")
print(f"TO={now}")
PY
          cat _range.env | tee -a "$GITHUB_ENV"
          echo "Range: $(cat _range.env)"

      # Diagnostics
      - name: List candidate files (diagnostics)
        shell: bash
        run: |
          set -euo pipefail
          echo "All files in $INPUT_DIR:"; ls -la "$INPUT_DIR" || true; echo
          echo "Files matching notes-YYYY-MM-DD.* in $FROM..$TO:"
          python - <<'PY'
import os, re, datetime as dt, pathlib as p
d = p.Path(os.environ["INPUT_DIR"])
frm = dt.date.fromisoformat(os.environ["FROM"])
to  = dt.date.fromisoformat(os.environ["TO"])
pat = re.compile(r"^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$", re.I)
matches = []
if d.is_dir():
    for f in sorted(d.iterdir()):
        m = pat.match(f.name)
        if not m: continue
        day = dt.date.fromisoformat(m.group(1))
        if frm <= day <= to:
            matches.append(f.name)
print("MATCHES:", ", ".join(matches) if matches else "(none)")
PY

      # Generate digest and normalize single-date header
      - name: Generate daily digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/daily.md
          python - <<'PY'
import re, io
p = "outputs/daily.md"
t = io.open(p, "r", encoding="utf-8").read()
m = re.search(r'^(# Team Digest \()(\d{4}-\d{2}-\d{2}) - \2(\))', t, re.M)
if m:
    t = t.replace(m.group(0), f"{m.group(1)}{m.group(2)}{m.group(3)}", 1)
    io.open(p, "w", encoding="utf-8").write(t)
PY
          echo '---- Preview (first 40 lines) ----'
          head -n 40 outputs/daily.md || true

      # Slack (optional)
      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/daily.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - uses: actions/upload-artifact@v4
        with:
          name: daily-digest
          path: outputs/**
