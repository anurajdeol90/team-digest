name: Monthly Digest

on:
  schedule:
    - cron: "0 8 1 * *"  # 1st day 08:00 (uses TZ below)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "${CANDIDATE}" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "${CANDIDATE}" ] && CANDIDATE="logs"

          if [ -d "${CANDIDATE}" ]; then
            INPUT_DIR="${CANDIDATE}"
          elif [ -d "${GITHUB_WORKSPACE}/${CANDIDATE}" ]; then
            INPUT_DIR="${GITHUB_WORKSPACE}/${CANDIDATE}"
          else
            INPUT_DIR="${CANDIDATE}"
          fi

          echo "INPUT_DIR=${INPUT_DIR}" | tee -a "${GITHUB_ENV}"

      - name: Compute previous calendar month (UTC)
        id: window
        shell: bash
        run: |
          set -euo pipefail
          FIRST_THIS="$(date +%Y-%m-01)"
          LAST_PREV="$(date +%F -d "${FIRST_THIS} - 1 day")"
          FROM="$(date +%Y-%m-01 -d "${LAST_PREV}")"
          TO="${LAST_PREV}"

          echo "FROM=${FROM}" | tee -a "${GITHUB_ENV}"
          echo "TO=${TO}"     | tee -a "${GITHUB_ENV}"
          echo "Window: ${FROM} .. ${TO}"

      - name: Diagnostics — list and match notes by filename date
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=${INPUT_DIR}"
          echo "All files in ${INPUT_DIR}:"
          ls -la "${INPUT_DIR}" || true
          echo

          echo "Matching notes-YYYY-MM-DD.* within ${FROM}..${TO} (by filename date):"
          shopt -s nullglob
          hits=()
          for f in "${INPUT_DIR}"/notes-????-??-??.*; do
            base="$(basename "$f")"
            day="${base#notes-}"; day="${day%%.*}"
            if [[ "${day}" >="${FROM}" && "${day}" <= "${TO}" ]]; then
              hits+=("${base}")
            fi
          done
          if [ "${#hits[@]}" -gt 0 ]; then
            printf 'MATCHES: %s\n' "$(IFS=', '; echo "${hits[*]}")"
          else
            echo "MATCHES: (none)"
          fi

      - name: Generate monthly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "${INPUT_DIR}" --from "${FROM}" --to "${TO}" --format md -o outputs/monthly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/monthly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "${GITHUB_ENV}"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "${GITHUB_ENV}"
          else
            echo "SLACK_WEBHOOK=" >> "${GITHUB_ENV}"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD="$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/monthly.md)"
          curl -fsSL -H 'Content-Type: application/json' --data-raw "${PAYLOAD}" "${SLACK_WEBHOOK}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: monthly-digest
          path: outputs/**
