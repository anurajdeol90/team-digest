name: Monthly Digest

on:
  schedule:
    - cron: "0 8 1 * *"   # 1st day 08:00 (uses TZ below)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"
          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"
          fi
          echo "INPUT_DIR=$INPUT_DIR" | tee -a "$GITHUB_ENV"

      - name: Compute previous calendar month (UTC) with Python (short)
        shell: bash
        run: |
          set -euo pipefail
          python -c "import datetime as dt;
today=dt.date.today();
first_this=dt.date(today.year,today.month,1);
last_prev=first_this-dt.timedelta(days=1);
from_=dt.date(last_prev.year,last_prev.month,1);
to=last_prev;
print('FROM='+str(from_)); print('TO='+str(to))" | tee -a "$GITHUB_ENV"

      - name: Retime logs mtime from filename date (notes-YYYY-MM-DD.*)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in "$INPUT_DIR"/notes-????-??-??.*; do
            base="$(basename "$f")"
            datepart="${base#notes-}"; datepart="${datepart%%.*}"
            touch -m -d "${datepart} 12:00:00" "$f" || true
            sed -i -e 's/\r$//' -e 's/•\t/- /g' -e 's/• /- /g' -e 's/\\#/#/g' -e 's/\\\[/[/' "$f" || true
          done

      - name: Diagnostics — list and match by filename date
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=$INPUT_DIR"
          echo "All files in $INPUT_DIR:"; ls -la "$INPUT_DIR" || true
          echo
          echo "Matching notes-YYYY-MM-DD.* within $FROM..$TO (by filename date):"
          python -c "import os,re,datetime as dt,glob;
frm=dt.date.fromisoformat(os.environ['FROM']); to=dt.date.fromisoformat(os.environ['TO']);
pat=re.compile(r'^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$',re.I);
names=[os.path.basename(p) for p in glob.glob(os.environ['INPUT_DIR'].rstrip('/')+'/notes-*')];
hits=[n for n in sorted(names) if pat.match(n) and frm<=dt.date.fromisoformat(pat.match(n).group(1))<=to];
print('MATCHES:', ', '.join(hits) if hits else '(none)')"

      - name: Generate monthly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/monthly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/monthly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/monthly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: monthly-digest
          path: outputs/**
