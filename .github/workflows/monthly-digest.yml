name: Monthly Digest

on:
  workflow_dispatch:
    inputs:
      year:
        description: "4-digit year (optional; overrides default)"
        required: false
        type: string
      month:
        description: "1-12 (optional; overrides default)"
        required: false
        type: string
      latest_with_data:
        description: "If true and no inputs, pick the latest month that has any logs"
        required: false
        type: boolean
      flat_by_name:
        description: "Sort Actions globally by name→priority (no priority buckets)"
        required: false
        type: boolean
      group_actions:
        description: "Group Actions by priority (ignored if flat_by_name is true)"
        required: false
        default: true
        type: boolean

jobs:
  monthly:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      LOGS_DIR: logs
      OUTFILE: outputs/monthly.md
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: python -m pip install --upgrade pip

      - name: Resolve month range (inputs → latest_with_data → current MTD)
        id: range
        shell: bash
        env:
          LOGS_DIR: ${{ env.LOGS_DIR }}
        run: |
          set -euo pipefail
          IN_Y="${{ inputs.year || '' }}"
          IN_M="${{ inputs.month || '' }}"
          LATEST_WITH_DATA="${{ inputs.latest_with_data }}"

          pick_month() {
            local y="$1" m="$2"
            local start end
            start="$(date -u -d "${y}-${m}-01" +%Y-%m-%d)"
            end="$(date -u -d "$start +1 month -1 day" +%Y-%m-%d)"
            echo "$start|$end"
          }

          if [ -n "$IN_Y" ] && [ -n "$IN_M" ]; then
            # Explicit month (full calendar)
            SEL=$(pick_month "$IN_Y" "$IN_M")
          elif [ "$LATEST_WITH_DATA" = "true" ]; then
            # Find most recent month present in logs filenames
            MONTHS=$(ls -1 "$LOGS_DIR"/notes-*.md 2>/devnull || true | sed -E 's~.*notes-([0-9]{4}-[0-9]{2})-[0-9]{2}\.md~\1~' | sort | uniq)
            if [ -n "$MONTHS" ]; then
              LM=$(echo "$MONTHS" | tail -n1)
              Y=$(echo "$LM" | cut -d- -f1)
              M=$(echo "$LM" | cut -d- -f2)
              SEL=$(pick_month "$Y" "$M")
            else
              # Fall back to current month to date
              START="$(date -u -d "$(date -u +%Y-%m-01)" +%Y-%m-%d)"
              END="$(date -u +%Y-%m-%d)"
              SEL="$START|$END"
            fi
          else
            # Default: current month to date (MTD)
            START="$(date -u -d "$(date -u +%Y-%m-01)" +%Y-%m-%d)"
            END="$(date -u +%Y-%m-%d)"
            SEL="$START|$END"
          fi

          START="${SEL%%|*}"
          END="${SEL##*|}"
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END"     >> "$GITHUB_OUTPUT"
          echo "Resolved month window (UTC): $START .. $END"

      - name: Diagnostics — list logs
        shell: bash
        run: |
          echo "Tracked under logs/:"
          git ls-files "logs/*" || true
          echo
          echo "Directory listing of $LOGS_DIR:"
          ls -la "$LOGS_DIR" || true

      - name: Diagnostics — match notes by filename date (robust)
        env:
          START: ${{ steps.range.outputs.start }}
          END:   ${{ steps.range.outputs.end }}
        run: python scripts/diagnose_weekly.py

      - name: Aggregate month → monthly.md
        shell: bash
        env:
          START: ${{ steps.range.outputs.start }}
          END:   ${{ steps.range.outputs.end }}
        run: |
          set -euo pipefail
          mkdir -p outputs
          ARGS=(
            --logs-dir "$LOGS_DIR"
            --start "$START"
            --end   "$END"
            --output "$OUTFILE"
            --title  "Team Digest ($START - $END)"
            --expect-missing
            --emit-kpis
            --owner-breakdown
            --owner-top 8
          )

          # Priority grouping (default true unless flat_by_name)
          if [ "${{ inputs.flat_by_name }}" != "true" ]; then
            if [ "${{ inputs.group_actions }}" = "true" ] || [ -z "${{ inputs.group_actions }}" ]; then
              ARGS+=( --group-actions )
            fi
          fi

          # Global sort by name → priority
          if [ "${{ inputs.flat_by_name }}" = "true" ]; then
            ARGS+=( --flat-by-name )
          fi

          python scripts/digest_aggregate.py "${ARGS[@]}"

          echo "---- Counts line ----"
          grep -m1 "^_Range:" "$OUTFILE" || true

          echo "---- Preview (first 60 lines) ----"
          head -n 60 "$OUTFILE" || true

      - name: Sanity fail if fully empty
        shell: bash
        run: |
          set -euo pipefail
          echo "---- Sanity check ----"
          echo "Looking for any non-empty top-level sections…"
          if grep -qE '^## (Summary|Decisions|Actions|Risks|Dependencies|Notes|Executive KPIs)$' "$OUTFILE"; then
            echo "OK: At least one section header found."
          else
            echo "---- First 120 lines for debugging ----"
            nl -ba "$OUTFILE" | head -n 120 || true
            echo "::error::Digest contains no content."
            exit 2
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: monthly-digest
          path: ${{ env.OUTFILE }}

      - name: Post to Slack (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        run: python scripts/post_to_slack.py "$OUTFILE"
