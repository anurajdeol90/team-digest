name: Monthly Digest (previous month)

on:
  schedule:
    - cron: "0 8 1 * *"  # 1st day 08:00 in your TZ
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"
          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"
          fi
          echo "Resolved INPUT_DIR=$INPUT_DIR"
          echo "INPUT_DIR=$INPUT_DIR" >> "$GITHUB_ENV"

      - name: Normalize & retime logs (markdown + mtime from filename)
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
# same normalizer as above
import os, re, io, time, datetime as dt, pathlib as p
root = p.Path(os.environ["INPUT_DIR"])
if not root.exists(): raise SystemExit(f"INPUT_DIR missing: {root}")
sect_map = {"summary","decisions","actions","risks","dependencies","notes"}
pat = re.compile(r"^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$", re.I)
for f in root.rglob("*"):
    if not f.is_file(): continue
    m = pat.match(f.name)
    try: t=f.read_text(encoding="utf-8",errors="replace")
    except Exception: t=io.open(f,"r",encoding="utf-8",errors="replace").read()
    t=t.replace("\r\n","\n").replace("• ","- ").replace("•\t","- ")
    lines=[]
    for line in t.splitlines():
        s=line.strip().lower()
        if s in sect_map and not line.lstrip().startswith("#"):
            lines.append(f"## {line.strip()}")
        else:
            lines.append(line)
    new="\n".join(lines).strip()+"\n"
    if new!=t: f.write_text(new,encoding="utf-8")
    if m:
        day=dt.date.fromisoformat(m.group(1))
        noon=dt.datetime.combine(day, dt.time(12,0))
        ts=noon.timestamp()
        os.utime(f,(ts,ts))
print("Normalization complete.")
PY

      - name: Compute previous calendar month
        shell: bash
        run: |
          set -euo pipefail
          # first day of THIS month in UTC, then go back one day to get last month
          FIRST_THIS=$(date -u +%Y-%m-01)
          LAST_PREV=$(date -u -d "$FIRST_THIS - 1 day" +%Y-%m-%d)
          FROM=$(date -u -d "$(date -u -d "$LAST_PREV" +%Y-%m)-01" +%Y-%m-%d)
          TO="$LAST_PREV"
          echo "FROM=$FROM  TO=$TO"
          echo "FROM=$FROM" >> "$GITHUB_ENV"
          echo "TO=$TO" >> "$GITHUB_ENV"

      - name: Generate monthly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/monthly.md
          echo '---- Preview (first 40 lines) ----'
          head -n 40 outputs/monthly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/monthly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - uses: actions/upload-artifact@v4
        with:
          name: monthly-digest
          path: outputs/**
