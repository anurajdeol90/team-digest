name: Monthly Digest

on:
  schedule:
    - cron: "0 8 1 * *"   # 1st of month at 08:00 (uses TZ below)
  workflow_dispatch:
    inputs:
      input_dir:
        description: "Override INPUT_DIR (repo-relative or absolute)"
        required: false
        type: string
      month_scope:
        description: "'prev' (previous calendar month) or 'this' (current month-to-date)"
        required: false
        default: "prev"
        type: string

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: ${{ vars.DIGEST_TZ || 'UTC' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install team-digest
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install "team-digest>=1.1.6,<2"

      - name: Resolve INPUT_DIR (override → repo var → logs/)
        shell: bash
        run: |
          set -euo pipefail
          CANDIDATE="${{ github.event.inputs.input_dir }}"
          if [ -z "$CANDIDATE" ] && [ -n "${{ vars.DIGEST_INPUT_DIR }}" ]; then
            CANDIDATE="${{ vars.DIGEST_INPUT_DIR }}"
          fi
          [ -z "$CANDIDATE" ] && CANDIDATE="logs"
          if [ -d "$CANDIDATE" ]; then
            INPUT_DIR="$CANDIDATE"
          elif [ -d "$GITHUB_WORKSPACE/$CANDIDATE" ]; then
            INPUT_DIR="$GITHUB_WORKSPACE/$CANDIDATE"
          else
            INPUT_DIR="$CANDIDATE"
          fi
          echo "INPUT_DIR=$INPUT_DIR" | tee -a "$GITHUB_ENV"

      - name: Compute month window (calendar)
        shell: bash
        run: |
          set -euo pipefail
          SCOPE="${{ github.event.inputs.month_scope }}"
          if [ -z "$SCOPE" ]; then
            if [ "${{ github.event_name }}" = "schedule" ]; then SCOPE="prev"; else SCOPE="prev"; fi
          fi
          # First day of THIS month:
          FIRST_THIS=$(date +%Y-%m-01)
          if [ "$SCOPE" = "this" ]; then
            FROM="$FIRST_THIS"
            TO=$(date +%F)   # up to today (month-to-date)
          else
            LAST_PREV=$(date -d "$FIRST_THIS - 1 day" +%Y-%m-%d)
            FROM="$(date -d "$(date -d "$LAST_PREV" +%Y-%m)-01" +%Y-%m-%d)"
            TO="$LAST_PREV"
          fi
          echo "FROM=$FROM" | tee -a "$GITHUB_ENV"
          echo "TO=$TO"     | tee -a "$GITHUB_ENV"
          echo "Window: $FROM .. $TO"

      - name: Diagnostics — list files and filename matches
        shell: bash
        run: |
          set -euo pipefail
          echo "INPUT_DIR=$INPUT_DIR"
          echo "All files in $INPUT_DIR:"; ls -la "$INPUT_DIR" || true
          echo
          echo "Matching notes-YYYY-MM-DD.* within $FROM..$TO (by filename date):"
          python - <<'PY'
import os, re, datetime as dt, glob
inp = os.environ["INPUT_DIR"]
frm = dt.date.fromisoformat(os.environ["FROM"])
to  = dt.date.fromisoformat(os.environ["TO"])
pat = re.compile(r'^notes-(\d{4}-\d{2}-\d{2})\.(md|markdown|txt)$', re.I)
hits = []
for p in glob.glob(os.path.join(inp, 'notes-*')):
    n = os.path.basename(p)
    m = pat.match(n)
    if not m: 
        continue
    d = dt.date.fromisoformat(m.group(1))
    if frm <= d <= to:
        hits.append(n)
print("MATCHES:", ", ".join(sorted(hits)) if hits else "(none)")
PY

      - name: Generate monthly digest
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p outputs
          team-digest --input "$INPUT_DIR" --from "$FROM" --to "$TO" --format md -o outputs/monthly.md
          echo '---- Preview (first 60 lines) ----'
          head -n 60 outputs/monthly.md || true

      - name: Resolve Slack webhook (optional)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK=" >> "$GITHUB_ENV"
          fi

      - name: Post to Slack (if webhook is set)
        if: env.SLACK_WEBHOOK != ''
        shell: bash
        run: |
          set -euo pipefail
          PAYLOAD=$(jq -Rs --arg pre '```' '{text: ($pre + . + $pre)}' < outputs/monthly.md)
          curl -fsSL -H 'Content-Type: application/json' --data-raw "$PAYLOAD" "$SLACK_WEBHOOK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: monthly-digest
          path: outputs/**
