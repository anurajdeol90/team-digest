name: Monthly Digest

on:
  workflow_dispatch:
    inputs:
      year:
        description: "4-digit year (optional; default: previous month)"
        required: false
        type: string
      month:
        description: "1-12 (optional; default: previous month)"
        required: false
        type: string
      flat_by_name:
        description: "Sort Actions globally by name→priority (no priority buckets)"
        required: false
        type: boolean
      group_actions:
        description: "Group Actions by priority (ignored if flat_by_name is true)"
        required: false
        default: true
        type: boolean

jobs:
  monthly:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      LOGS_DIR: logs
      OUTFILE: outputs/monthly.md
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: python -m pip install --upgrade pip

      - name: Resolve month range (inputs → previous calendar month)
        id: range
        shell: bash
        run: |
          set -euo pipefail
          IN_Y="${{ inputs.year }}"
          IN_M="${{ inputs.month }}"

          if [ -n "$IN_Y" ] && [ -n "$IN_M" ]; then
            # Use specified month
            START="$(date -u -d "${IN_Y}-${IN_M}-01" +%Y-%m-%d)"
          else
            # Previous calendar month
            START="$(date -u -d "$(date -u +%Y-%m-01) -1 month" +%Y-%m-%d)"
          fi

          # END = last day of that month
          END="$(date -u -d "$START +1 month -1 day" +%Y-%m-%d)"

          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END"     >> "$GITHUB_OUTPUT"
          echo "Resolved month window (UTC): $START .. $END"

      - name: Diagnostics — list logs
        shell: bash
        run: |
          echo "Tracked under logs/:"
          git ls-files "logs/*" || true
          echo
          echo "Directory listing of $LOGS_DIR:"
          ls -la "$LOGS_DIR" || true

      - name: Diagnostics — match notes by filename date (robust)
        env:
          START: ${{ steps.range.outputs.start }}
          END:   ${{ steps.range.outputs.end }}
        run: python scripts/diagnose_weekly.py

      - name: Aggregate month → monthly.md
        shell: bash
        env:
          START: ${{ steps.range.outputs.start }}
          END:   ${{ steps.range.outputs.end }}
        run: |
          mkdir -p outputs
          ARGS=(
            --logs-dir "$LOGS_DIR"
            --start "$START"
            --end   "$END"
            --output "$OUTFILE"
            --title  "Team Digest ($START - $END)"
            --expect-missing
          )

          # Priority grouping (default true unless flat_by_name)
          if [ "${{ inputs.flat_by_name }}" != "true" ]; then
            if [ "${{ inputs.group_actions }}" = "true" ] || [ -z "${{ inputs.group_actions }}" ]; then
              ARGS+=( --group-actions )
            fi
          fi

          # Global sort by name → priority
          if [ "${{ inputs.flat_by_name }}" = "true" ]; then
            ARGS+=( --flat-by-name )
          fi

          python scripts/digest_aggregate.py "${ARGS[@]}"

          echo "---- Counts line ----"
          grep -m1 "^_Range:" "$OUTFILE" || true

          echo "---- Preview (first 60 lines) ----"
          head -n 60 "$OUTFILE" || true

      - name: Sanity fail if fully empty
        shell: bash
        run: |
          if grep -q "^## Summary$" "$OUTFILE" || \
             grep -q "^## Decisions$" "$OUTFILE" || \
             grep -q "^## Actions$" "$OUTFILE" || \
             grep -q "^## Risks$" "$OUTFILE" || \
             grep -q "^## Dependencies$" "$OUTFILE" || \
             grep -q "^## Notes$" "$OUTFILE"; then
            echo "Digest contains at least one non-empty section."
          else
            echo "::error::Digest contains no content."
            exit 2
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: monthly-digest
          path: ${{ env.OUTFILE }}

      - name: Post to Slack (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        run: python scripts/post_to_slack.py "$OUTFILE"
